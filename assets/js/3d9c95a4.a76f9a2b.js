"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[125],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),c=d(t),p=i,g=c["".concat(s,".").concat(p)]||c[p]||u[p]||o;return t?a.createElement(g,l(l({ref:n},m),{},{components:t})):a.createElement(g,l({ref:n},m))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=p;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[c]="string"==typeof e?e:i,l[1]=r;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3612:(e,n,t)=>{t.d(n,{Z:()=>g});var a=t(7294),i=t(6010),o=t(5281),l=t(5999);const r="admonition_LlT9",s="admonitionHeading_tbUL",d="admonitionIcon_kALy",m="admonitionContent_S0QG";const c={note:{infimaClassName:"secondary",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:a.createElement(l.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:a.createElement(l.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:a.createElement(l.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:a.createElement(l.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:a.createElement(l.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},u={secondary:"note",important:"info",success:"tip",warning:"danger"};function p(e){const{mdxAdmonitionTitle:n,rest:t}=function(e){const n=a.Children.toArray(e),t=n.find((e=>a.isValidElement(e)&&"mdxAdmonitionTitle"===e.props?.mdxType)),i=a.createElement(a.Fragment,null,n.filter((e=>e!==t)));return{mdxAdmonitionTitle:t,rest:i}}(e.children);return{...e,title:e.title??n,children:t}}function g(e){const{children:n,type:t,title:l,icon:g}=p(e),f=function(e){const n=u[e]??e,t=c[n];return t||(console.warn(`No admonition config found for admonition type "${n}". Using Info as fallback.`),c.info)}(t),v=l??f.label,{iconComponent:h}=f,k=g??a.createElement(h,null);return a.createElement("div",{className:(0,i.Z)(o.k.common.admonition,o.k.common.admonitionType(e.type),"alert",`alert--${f.infimaClassName}`,r)},a.createElement("div",{className:s},a.createElement("span",{className:d},k),v),a.createElement("div",{className:m},n))}},3191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var a=t(7462),i=(t(7294),t(3905)),o=t(3612);const l={title:"Home",description:"A declarative form validation library for Kotlin.",icon:"material/newspaper",sidebar_position:1,slug:"/"},r=void 0,s={unversionedId:"home",id:"home",title:"Home",description:"A declarative form validation library for Kotlin.",source:"@site/docs/home.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/naingaungluu/form-conductor/tree/documentation/docs/docs/home.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Home",description:"A declarative form validation library for Kotlin.",icon:"material/newspaper",sidebar_position:1,slug:"/"},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/docs/installation"}},d={},m=[{value:"\ud83d\udd28 Form construction using built-in annotations",id:"-form-construction-using-built-in-annotations",level:2},{value:"Using Jetpack Compose",id:"using-jetpack-compose",level:2},{value:"Full Example",id:"full-example",level:3},{value:"Using Traditional Form Building (Android and JVM apps)",id:"using-traditional-form-building-android-and-jvm-apps",level:2},{value:"Declarative approach",id:"declarative-approach",level:3},{value:"Imperative Approach",id:"imperative-approach",level:3},{value:"Validation",id:"validation",level:2},{value:"Custom Validations",id:"custom-validations",level:2}],c={toc:m};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("br",null),(0,i.kt)("h1",{id:"form-conductor"},"Form Conductor"),(0,i.kt)("p",null,"A declarative form validation library for Kotlin."),(0,i.kt)("p",null,"Form conductor is more than form validation. It provides a handful of reusable API to construct a form in simple easy steps.\nForm conductor tries to tackle three aspects of forms: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Form Data Handling")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Form State Management")," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Form Validation"))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/maven-central/v/me.naingaungluu.formconductor/core?color=green&style=for-the-badge",alt:"Maven Central"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/codecov/c/github/NaingAungLuu/form-conductor?style=for-the-badge&token=KC7CK5DOZZ",alt:"Codecov"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/issues/NaingAungLuu/form-conductor?style=for-the-badge",alt:"GitHub issues"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/license/NaingAungLuu/form-conductor?style=for-the-badge",alt:"GitHub"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/github/last-commit/NaingAungLuu/form-conductor?style=for-the-badge",alt:"GitHub last commit"})),(0,i.kt)(o.Z,{type:"tip",icon:"\ud83c\udf89",title:"Announcement",mdxType:"Admonition"},(0,i.kt)("p",null,"Form conductor is now published on ",(0,i.kt)("inlineCode",{parentName:"p"},"Maven Central")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"me.naingaungluu.formconductor")," .\nCheck ",(0,i.kt)("a",{parentName:"p",href:"/docs/installation"},"Installation Docs")," for details")),(0,i.kt)("h2",{id:"-form-construction-using-built-in-annotations"},"\ud83d\udd28 Form construction using built-in annotations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="FormData.kt"',title:'"FormData.kt"'},'@Form\ndata class SignUpForm(\n    @MinLength(2)\n    val name: String = "",\n\n    @IntegerRange(min = 18, max = 99)\n    val age: Int = 0,\n\n    @EmailAddress\n    val emailAddress: String = "",\n\n    val gender: Gender = Gender.Male,\n    \n    @Optional\n    @MaxLength(150)\n    val address: String? = null\n\n    @IsChecked\n    val termsAndConditionAgreed: Boolean = false\n    \n    @MaxLength(200)\n    val bio: String = ""\n)\n')),(0,i.kt)("h2",{id:"using-jetpack-compose"},"Using Jetpack Compose"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Form Composable"',title:'"Form','Composable"':!0},'@Composable\nfun FormScreen() {\n    Column {\n        // highlight-start\n        form(SignUpForm::class) {\n           /**\n            * Following properties are available\n            * formState - State<FormResult<SignUpForm>>\n            * registerField() - returns field object\n            */\n            Button(\n                text = "Sign Up",\n                enabled = this.formState.value is FormResult.Success\n            )\n        }\n        // highlight-end\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Field Composable"',title:'"Field','Composable"':!0},"form(SignUpForm::class) {\n    field(SignUpForm::name) {\n       /**\n        * Following properties are available\n        * state - compose state with field value: State<FieldValue<String>>\n        * resultState - validation result state: State<FieldResult<String>>\n        * setField() - sets the field value and validate\n        */\n        TextField(\n            value = state.value?.value.orEmpty(),\n            onValueChange = this::setField,\n            isError = resultState.value is FieldResult.Error\n        )\n    }\n}\n")),(0,i.kt)("h3",{id:"full-example"},"Full Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Composable\nfun FormScreen() {\n    Column {\n        form(SignUpForm::class) {\n            field(SignUpFormData::name) {\n                TextField(\n                    value = state.value?.value.orEmpty(),\n                    onValueChange = this::setField,\n                    isError = resultState.value is FieldResult.Error\n                )\n            }\n            field(SignUpFormData::emailAddress) {\n                TextField(\n                    value = state.value?.value.orEmpty(),\n                    onValueChange = this::setField\n                )\n            }\n            field(SignUpFormData::gender) {\n                Row(Modifier.selectableGroup()) {\n                    RadioButton(\n                        selected = state.value?.value == Gender.Male,\n                        onClick = { setField(Gender.Male) },\n                        modifier = Modifier.semantics { contentDescription = "Male" }\n                    )\n                    RadioButton(\n                        selected = state.value?.value == Gender.Female,\n                        onClick = { setField(Gender.Female) },\n                        modifier = Modifier.semantics { contentDescription = "Male" }\n                    )\n                }\n            }\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"using-traditional-form-building-android-and-jvm-apps"},"Using Traditional Form Building (Android and JVM apps)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="LoginForm.kt"',title:'"LoginForm.kt"'},'@Form\ndata class LoginForm(\n\n    @EmailAddress\n    val emailAddress: String = "",\n\n    @MinLength(8)\n    val password: String = ""\n    \n)\n')),(0,i.kt)("h3",{id:"declarative-approach"},"Declarative approach"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MainActivity.kt"',title:'"MainActivity.kt"'},"override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    \n    // Declarative Form Building\n    val formState = form(LoginForm::class) {\n\n        field(LoginForm::emailAddress) {\n\n            etEmailAddress.doAfterTextChanged {\n                this.setField(it)\n            }\n\n            this.resultStream.collectLatest {\n                when(it) {\n                    is FieldResult.Error -> {\n                       /**\n                        * Available properties in Error\n                        * message - internal error message : String\n                        * failedRule - ValidationRule<String, EmailAddress>\n                        * \n                        * You can compose your error message as needed\n                        */\n                        etEmailAddress.error = it.message\n                    }\n                }\n            }\n        }\n    }\n}\n")),(0,i.kt)("h3",{id:"imperative-approach"},"Imperative Approach"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MainActivity.kt"',title:'"MainActivity.kt"'},"override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n     // Imperative Form Building\n    val formState = form(LoginForm::class)\n    val emailAddressState = form.field(LoginForm::emailAddress)\n    val passwordState = form.field(LoginForm::password)\n\n    etLogin.doAfterTextChanged {\n        emailAddressState.setField(it)\n    }\n    etPassword.doAfterTextChanged {\n        passwordState.setField(it)\n    }\n\n    emailAddresState.resultStream.collectLatest {\n        if (it is FieldResult.Error) {\n            etEmailAddress.error = it.message // or any error message as shown above\n        }\n    }\n    \n    formState.valueStream.collectLatest { result ->\n        btnLogin.enabled = (result is FormResult.Success)\n    }\n\n    btnLogin.setOnClickListener {\n        viewModel.login(formState.value)\n    }\n}\n")),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Available Validation Annotations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// String\n@EmailAddress\n\n@Optional\n\n@MaxLength(value)\n\n@MinLength(value)\n\n@WebUrl(httpRequired)\n\n\n// Number\n@FloatRange(min, max)\n\n@IntegerRange(min, max)\n\n\n// Boolean\n@IsChecked\n\n// More validations in development\n")),(0,i.kt)("p",null,"The great thing about ",(0,i.kt)("inlineCode",{parentName:"p"},"form-conductor")," is it's very flexible. Each Validation annotation is decoupled from Validation rules."),(0,i.kt)("p",null,"If you don't like to use annotations, you can use from a list of built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidationRule")," instead"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Each rule is associated to respective annotations\n\nEmailAddressRule.validate(value)\n\nFloatRangeRule.validate(value, FloatRange(min,max))\n\nWebUrlRule.validate(value, WebUrl(httpRequired = true))\n")),(0,i.kt)("h2",{id:"custom-validations"},"Custom Validations"),(0,i.kt)("p",null,"Feeling adventurous or feel like built-in validation rules aren't enough for you?"),(0,i.kt)("p",null,"You can create your own validations rules and annotations to work with ",(0,i.kt)("inlineCode",{parentName:"p"},"form-conductor")," instead. You can take advantage of ",(0,i.kt)("inlineCode",{parentName:"p"},"FieldValidation")," annotation class and creat your custom annotations and validations."),(0,i.kt)("p",null,"Please check ",(0,i.kt)("a",{parentName:"p",href:"/docs/Guide/customValidation"},"Custom Validation Guide")," for full comprehensive guide on custom validations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Custom Annotation\n\n@Target(AnnotationTarget.PROPERTY)\n@Retention(AnnotationRetention.RUNTIME)\n@FieldValidation(\n    fieldType = LocalDate::class,\n    validator = FutureDateRule::class\n)\nannotation class FutureDate\n\n\n// Custom validation rule\n\nobject FutureDateRule : StatelessValdiationRule<LocalDate, FutureDate> {\n    override fun validate(value: LocalDate, options: FutureDate): FieldResult {\n        // Your custom validation logic here\n    }\n}\n\n\n// Usage\n// This will automatically work with form-conductor\n\ndata class FormData(\n    @FutureDate\n    val date: LocalDate\n)\n")))}u.isMDXComponent=!0}}]);